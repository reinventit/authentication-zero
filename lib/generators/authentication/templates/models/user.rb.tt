class User < ApplicationRecord
  has_secure_password

  has_many :email_verification_tokens, dependent: :destroy
  has_many :password_reset_tokens, dependent: :destroy

  has_many :sessions, dependent: :destroy
  <%- if options.omniauthable? -%>
  has_many :authorizations, dependent: :destroy
  <%- end -%>
  <%- if options.trackable? -%>
  has_many :events, dependent: :destroy
  <%- end -%>
  <%- if code_verifiable? %>
  kredis_string :verification_code, expires_in: 2.days
  <%- end -%>

  validates :email, presence: true, uniqueness: true, format: { with: URI::MailTo::EMAIL_REGEXP }
  validates :password, allow_nil: true, length: { minimum: 12 }, format: { with: /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/ }
  <%- if options.pwned? -%>
  validates :password, not_pwned: { message: "might easily be guessed" }
  <%- end -%>

  before_validation do
    self.email = email.try(:downcase).try(:strip)
  end

  before_validation if: :email_changed?, unless: :new_record? do
    self.verified = false
  end

  after_update if: :password_digest_previously_changed? do
    sessions.where.not(id: Current.session).destroy_all
  end

  <%- if options.trackable? %>
  after_update if: :email_previously_changed? do
    events.create! action: "email_verification_requested"
  end

  after_update if: :password_digest_previously_changed? do
    events.create! action: "password_changed"
  end

  after_update if: :verified_previously_changed? do
    events.create! action: "email_verified" if verified?
  end
  <%- end -%>
end
